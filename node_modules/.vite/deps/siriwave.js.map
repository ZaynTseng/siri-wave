{
  "version": 3,
  "sources": ["../../siriwave/dist/siriwave.esm.js"],
  "sourcesContent": ["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\nclass ClassicCurve {\n    constructor(ctrl, definition) {\n        this.ATT_FACTOR = 4;\n        this.GRAPH_X = 2;\n        this.AMPLITUDE_FACTOR = 0.6;\n        this.ctrl = ctrl;\n        this.definition = definition;\n    }\n    globalAttFn(x) {\n        return Math.pow(this.ATT_FACTOR / (this.ATT_FACTOR + Math.pow(x, this.ATT_FACTOR)), this.ATT_FACTOR);\n    }\n    xPos(i) {\n        return this.ctrl.width * ((i + this.GRAPH_X) / (this.GRAPH_X * 2));\n    }\n    yPos(i) {\n        return (this.AMPLITUDE_FACTOR *\n            (this.globalAttFn(i) *\n                (this.ctrl.heightMax * this.ctrl.amplitude) *\n                (1 / this.definition.attenuation) *\n                Math.sin(this.ctrl.opt.frequency * i - this.ctrl.phase)));\n    }\n    draw() {\n        const { ctx } = this.ctrl;\n        ctx.moveTo(0, 0);\n        ctx.beginPath();\n        const finalColor = this.definition.color || this.ctrl.color;\n        const colorHex = finalColor.replace(/rgb\\(/g, \"\").replace(/\\)/g, \"\");\n        ctx.strokeStyle = `rgba(${colorHex},${this.definition.opacity})`;\n        ctx.lineWidth = this.definition.lineWidth;\n        // Cycle the graph from -X to +X every PX_DEPTH and draw the line\n        for (let i = -this.GRAPH_X; i <= this.GRAPH_X; i += this.ctrl.opt.pixelDepth) {\n            ctx.lineTo(this.xPos(i), this.ctrl.heightMax + this.yPos(i));\n        }\n        ctx.stroke();\n    }\n    static getDefinition() {\n        return [\n            {\n                attenuation: -2,\n                lineWidth: 1,\n                opacity: 0.1,\n            },\n            {\n                attenuation: -6,\n                lineWidth: 1,\n                opacity: 0.2,\n            },\n            {\n                attenuation: 4,\n                lineWidth: 1,\n                opacity: 0.4,\n            },\n            {\n                attenuation: 2,\n                lineWidth: 1,\n                opacity: 0.6,\n            },\n            {\n                attenuation: 1,\n                lineWidth: 1.5,\n                opacity: 1,\n            },\n        ];\n    }\n}\n\nclass iOS9Curve {\n    constructor(ctrl, definition) {\n        this.GRAPH_X = 25;\n        this.AMPLITUDE_FACTOR = 0.8;\n        this.SPEED_FACTOR = 1;\n        this.DEAD_PX = 2;\n        this.ATT_FACTOR = 4;\n        this.DESPAWN_FACTOR = 0.02;\n        this.DEFAULT_NOOFCURVES_RANGES = [2, 5];\n        this.DEFAULT_AMPLITUDE_RANGES = [0.3, 1];\n        this.DEFAULT_OFFSET_RANGES = [-3, 3];\n        this.DEFAULT_WIDTH_RANGES = [1, 3];\n        this.DEFAULT_SPEED_RANGES = [0.5, 1];\n        this.DEFAULT_DESPAWN_TIMEOUT_RANGES = [500, 2000];\n        this.ctrl = ctrl;\n        this.definition = definition;\n        this.noOfCurves = 0;\n        this.spawnAt = 0;\n        this.prevMaxY = 0;\n        this.phases = [];\n        this.offsets = [];\n        this.speeds = [];\n        this.finalAmplitudes = [];\n        this.widths = [];\n        this.amplitudes = [];\n        this.despawnTimeouts = [];\n        this.verses = [];\n    }\n    getRandomRange(e) {\n        return e[0] + Math.random() * (e[1] - e[0]);\n    }\n    spawnSingle(ci) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        this.phases[ci] = 0;\n        this.amplitudes[ci] = 0;\n        this.despawnTimeouts[ci] = this.getRandomRange((_b = (_a = this.ctrl.opt.ranges) === null || _a === void 0 ? void 0 : _a.despawnTimeout) !== null && _b !== void 0 ? _b : this.DEFAULT_DESPAWN_TIMEOUT_RANGES);\n        this.offsets[ci] = this.getRandomRange((_d = (_c = this.ctrl.opt.ranges) === null || _c === void 0 ? void 0 : _c.offset) !== null && _d !== void 0 ? _d : this.DEFAULT_OFFSET_RANGES);\n        this.speeds[ci] = this.getRandomRange((_f = (_e = this.ctrl.opt.ranges) === null || _e === void 0 ? void 0 : _e.speed) !== null && _f !== void 0 ? _f : this.DEFAULT_SPEED_RANGES);\n        this.finalAmplitudes[ci] = this.getRandomRange((_h = (_g = this.ctrl.opt.ranges) === null || _g === void 0 ? void 0 : _g.amplitude) !== null && _h !== void 0 ? _h : this.DEFAULT_AMPLITUDE_RANGES);\n        this.widths[ci] = this.getRandomRange((_k = (_j = this.ctrl.opt.ranges) === null || _j === void 0 ? void 0 : _j.width) !== null && _k !== void 0 ? _k : this.DEFAULT_WIDTH_RANGES);\n        this.verses[ci] = this.getRandomRange([-1, 1]);\n    }\n    getEmptyArray(count) {\n        return new Array(count);\n    }\n    spawn() {\n        var _a, _b;\n        this.spawnAt = Date.now();\n        this.noOfCurves = Math.floor(this.getRandomRange((_b = (_a = this.ctrl.opt.ranges) === null || _a === void 0 ? void 0 : _a.noOfCurves) !== null && _b !== void 0 ? _b : this.DEFAULT_NOOFCURVES_RANGES));\n        this.phases = this.getEmptyArray(this.noOfCurves);\n        this.offsets = this.getEmptyArray(this.noOfCurves);\n        this.speeds = this.getEmptyArray(this.noOfCurves);\n        this.finalAmplitudes = this.getEmptyArray(this.noOfCurves);\n        this.widths = this.getEmptyArray(this.noOfCurves);\n        this.amplitudes = this.getEmptyArray(this.noOfCurves);\n        this.despawnTimeouts = this.getEmptyArray(this.noOfCurves);\n        this.verses = this.getEmptyArray(this.noOfCurves);\n        for (let ci = 0; ci < this.noOfCurves; ci++) {\n            this.spawnSingle(ci);\n        }\n    }\n    globalAttFn(x) {\n        return Math.pow(this.ATT_FACTOR / (this.ATT_FACTOR + Math.pow(x, 2)), this.ATT_FACTOR);\n    }\n    sin(x, phase) {\n        return Math.sin(x - phase);\n    }\n    yRelativePos(i) {\n        let y = 0;\n        for (let ci = 0; ci < this.noOfCurves; ci++) {\n            // Generate a static T so that each curve is distant from each oterh\n            let t = 4 * (-1 + (ci / (this.noOfCurves - 1)) * 2);\n            // but add a dynamic offset\n            t += this.offsets[ci];\n            const k = 1 / this.widths[ci];\n            const x = i * k - t;\n            y += Math.abs(this.amplitudes[ci] * this.sin(this.verses[ci] * x, this.phases[ci]) * this.globalAttFn(x));\n        }\n        // Divide for NoOfCurves so that y <= 1\n        return y / this.noOfCurves;\n    }\n    yPos(i) {\n        return (this.AMPLITUDE_FACTOR *\n            this.ctrl.heightMax *\n            this.ctrl.amplitude *\n            this.yRelativePos(i) *\n            this.globalAttFn((i / this.GRAPH_X) * 2));\n    }\n    xPos(i) {\n        return this.ctrl.width * ((i + this.GRAPH_X) / (this.GRAPH_X * 2));\n    }\n    drawSupportLine() {\n        const { ctx } = this.ctrl;\n        const coo = [0, this.ctrl.heightMax, this.ctrl.width, 1];\n        const gradient = ctx.createLinearGradient.apply(ctx, coo);\n        gradient.addColorStop(0, \"transparent\");\n        gradient.addColorStop(0.1, \"rgba(255,255,255,.5)\");\n        gradient.addColorStop(1 - 0.1 - 0.1, \"rgba(255,255,255,.5)\");\n        gradient.addColorStop(1, \"transparent\");\n        ctx.fillStyle = gradient;\n        ctx.fillRect.apply(ctx, coo);\n    }\n    draw() {\n        const { ctx } = this.ctrl;\n        ctx.globalAlpha = 0.7;\n        ctx.globalCompositeOperation = this.ctrl.opt.globalCompositeOperation;\n        if (this.spawnAt === 0) {\n            this.spawn();\n        }\n        if (this.definition.supportLine) {\n            // Draw the support line\n            return this.drawSupportLine();\n        }\n        for (let ci = 0; ci < this.noOfCurves; ci++) {\n            if (this.spawnAt + this.despawnTimeouts[ci] <= Date.now()) {\n                this.amplitudes[ci] -= this.DESPAWN_FACTOR;\n            }\n            else {\n                this.amplitudes[ci] += this.DESPAWN_FACTOR;\n            }\n            this.amplitudes[ci] = Math.min(Math.max(this.amplitudes[ci], 0), this.finalAmplitudes[ci]);\n            this.phases[ci] = (this.phases[ci] + this.ctrl.speed * this.speeds[ci] * this.SPEED_FACTOR) % (2 * Math.PI);\n        }\n        let maxY = -Infinity;\n        // Write two opposite waves\n        for (const sign of [1, -1]) {\n            ctx.beginPath();\n            for (let i = -this.GRAPH_X; i <= this.GRAPH_X; i += this.ctrl.opt.pixelDepth) {\n                const x = this.xPos(i);\n                const y = this.yPos(i);\n                ctx.lineTo(x, this.ctrl.heightMax - sign * y);\n                maxY = Math.max(maxY, y);\n            }\n            ctx.closePath();\n            ctx.fillStyle = `rgba(${this.definition.color}, 1)`;\n            ctx.strokeStyle = `rgba(${this.definition.color}, 1)`;\n            ctx.fill();\n        }\n        if (maxY < this.DEAD_PX && this.prevMaxY > maxY) {\n            this.spawnAt = 0;\n        }\n        this.prevMaxY = maxY;\n        return null;\n    }\n    static getDefinition() {\n        return [\n            {\n                color: \"255,255,255\",\n                supportLine: true,\n            },\n            {\n                // blue\n                color: \"15, 82, 169\",\n            },\n            {\n                // red\n                color: \"173, 57, 76\",\n            },\n            {\n                // green\n                color: \"48, 220, 155\",\n            },\n        ];\n    }\n}\n\nclass SiriWave {\n    constructor(_a) {\n        var { container } = _a, rest = __rest(_a, [\"container\"]);\n        // Phase of the wave (passed to Math.sin function)\n        this.phase = 0;\n        // Boolean value indicating the the animation is running\n        this.run = false;\n        // Curves objects to animate\n        this.curves = [];\n        const csStyle = window.getComputedStyle(container);\n        this.opt = Object.assign({ container, style: \"ios\", ratio: window.devicePixelRatio || 1, speed: 0.2, amplitude: 1, frequency: 6, color: \"#fff\", cover: false, width: parseInt(csStyle.width.replace(\"px\", \"\"), 10), height: parseInt(csStyle.height.replace(\"px\", \"\"), 10), autostart: true, pixelDepth: 0.02, lerpSpeed: 0.1, globalCompositeOperation: \"lighter\" }, rest);\n        /**\n         * Actual speed of the animation. Is not safe to change this value directly, use `setSpeed` instead.\n         */\n        this.speed = Number(this.opt.speed);\n        /**\n         * Actual amplitude of the animation. Is not safe to change this value directly, use `setAmplitude` instead.\n         */\n        this.amplitude = Number(this.opt.amplitude);\n        /**\n         * Width of the canvas multiplied by pixel ratio\n         */\n        this.width = Number(this.opt.ratio * this.opt.width);\n        /**\n         * Height of the canvas multiplied by pixel ratio\n         */\n        this.height = Number(this.opt.ratio * this.opt.height);\n        /**\n         * Maximum height for a single wave\n         */\n        this.heightMax = Number(this.height / 2) - 6;\n        /**\n         * Color of the wave (used in Classic iOS)\n         */\n        this.color = `rgb(${this.hex2rgb(this.opt.color)})`;\n        /**\n         * An object containing controller variables that need to be interpolated\n         * to an another value before to be actually changed\n         */\n        this.interpolation = {\n            speed: this.speed,\n            amplitude: this.amplitude,\n        };\n        /**\n         * Canvas DOM Element where curves will be drawn\n         */\n        this.canvas = document.createElement(\"canvas\");\n        /**\n         * 2D Context from Canvas\n         */\n        const ctx = this.canvas.getContext(\"2d\");\n        if (ctx === null) {\n            throw new Error(\"Unable to create 2D Context\");\n        }\n        this.ctx = ctx;\n        // Set dimensions\n        this.canvas.width = this.width;\n        this.canvas.height = this.height;\n        // By covering, we ensure the canvas is in the same size of the parent\n        if (this.opt.cover === true) {\n            this.canvas.style.width = this.canvas.style.height = \"100%\";\n        }\n        else {\n            this.canvas.style.width = `${this.width / this.opt.ratio}px`;\n            this.canvas.style.height = `${this.height / this.opt.ratio}px`;\n        }\n        // Instantiate all curves based on the style\n        switch (this.opt.style) {\n            case \"ios9\":\n                this.curves = (this.opt.curveDefinition || iOS9Curve.getDefinition()).map((def) => new iOS9Curve(this, def));\n                break;\n            case \"ios\":\n            default:\n                this.curves = (this.opt.curveDefinition || ClassicCurve.getDefinition()).map((def) => new ClassicCurve(this, def));\n                break;\n        }\n        // Attach to the container\n        this.opt.container.appendChild(this.canvas);\n        // Start the animation\n        if (this.opt.autostart) {\n            this.start();\n        }\n    }\n    /**\n     * Convert an HEX color to RGB\n     */\n    hex2rgb(hex) {\n        const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n        hex = hex.replace(shorthandRegex, (m, r, g, b) => r + r + g + g + b + b);\n        const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n        return result\n            ? `${parseInt(result[1], 16).toString()},${parseInt(result[2], 16).toString()},${parseInt(result[3], 16).toString()}`\n            : null;\n    }\n    intLerp(v0, v1, t) {\n        return v0 * (1 - t) + v1 * t;\n    }\n    /**\n     * Interpolate a property to the value found in this.interpolation\n     */\n    lerp(propertyStr) {\n        const prop = this.interpolation[propertyStr];\n        if (prop !== null) {\n            this[propertyStr] = this.intLerp(this[propertyStr], prop, this.opt.lerpSpeed);\n            if (this[propertyStr] - prop === 0) {\n                this.interpolation[propertyStr] = null;\n            }\n        }\n        return this[propertyStr];\n    }\n    /**\n     * Clear the canvas\n     */\n    clear() {\n        this.ctx.globalCompositeOperation = \"destination-out\";\n        this.ctx.fillRect(0, 0, this.width, this.height);\n        this.ctx.globalCompositeOperation = \"source-over\";\n    }\n    /**\n     * Draw all curves\n     */\n    draw() {\n        this.curves.forEach((curve) => curve.draw());\n    }\n    /**\n     * Clear the space, interpolate values, calculate new steps and draws\n     * @returns\n     */\n    startDrawCycle() {\n        this.clear();\n        // Interpolate values\n        this.lerp(\"amplitude\");\n        this.lerp(\"speed\");\n        this.draw();\n        this.phase = (this.phase + (Math.PI / 2) * this.speed) % (2 * Math.PI);\n        if (window.requestAnimationFrame) {\n            this.animationFrameId = window.requestAnimationFrame(this.startDrawCycle.bind(this));\n        }\n        else {\n            this.timeoutId = setTimeout(this.startDrawCycle.bind(this), 20);\n        }\n    }\n    /* API */\n    /**\n     * Start the animation\n     */\n    start() {\n        if (!this.canvas) {\n            throw new Error(\"This instance of SiriWave has been disposed, please create a new instance\");\n        }\n        this.phase = 0;\n        // Ensure we don't re-launch the draw cycle\n        if (!this.run) {\n            this.run = true;\n            this.startDrawCycle();\n        }\n    }\n    /**\n     * Stop the animation\n     */\n    stop() {\n        this.phase = 0;\n        this.run = false;\n        // Clear old draw cycle on stop\n        if (this.animationFrameId) {\n            window.cancelAnimationFrame(this.animationFrameId);\n        }\n        if (this.timeoutId) {\n            clearTimeout(this.timeoutId);\n        }\n    }\n    /**\n     * Dispose\n     */\n    dispose() {\n        this.stop();\n        if (this.canvas) {\n            this.canvas.remove();\n            this.canvas = null;\n        }\n    }\n    /**\n     * Set a new value for a property (interpolated)\n     */\n    set(propertyStr, value) {\n        this.interpolation[propertyStr] = value;\n    }\n    /**\n     * Set a new value for the speed property (interpolated)\n     */\n    setSpeed(value) {\n        this.set(\"speed\", value);\n    }\n    /**\n     * Set a new value for the amplitude property (interpolated)\n     */\n    setAmplitude(value) {\n        this.set(\"amplitude\", value);\n    }\n}\n\nexport { SiriWave as default };\n"],
  "mappings": "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",
  "names": []
}
